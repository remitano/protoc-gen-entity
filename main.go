package main

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func goTypeForField(field *protogen.Field) string {
	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Fixed32Kind:
		return "int32"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Fixed64Kind:
		return "int64"
	case protoreflect.FloatKind:
		return "float32"
	case protoreflect.DoubleKind:
		return "float64"
	case protoreflect.StringKind:
		return "string"
	case protoreflect.BytesKind:
		return "[]byte"
	case protoreflect.MessageKind:
		return "*" + string(field.Message.GoIdent.GoName)
	default:
		return "interface{}"
	}
}

func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		for _, f := range plugin.Files {
			if !f.Generate {
				continue
			}

			filename := f.GeneratedFilenamePrefix + ".go"
			g := plugin.NewGeneratedFile(filename, f.GoImportPath)

			g.P("// Code generated by protoc-gen-entity-v2. DO NOT EDIT.")
			g.P("package ", f.GoPackageName)
			g.P()
			g.P(`import (`)
			g.P(`    "fmt"`)
			g.P(``)
			g.P(`    "trading.engine/go_services/pkg/common/hash"`)
			g.P(`    "trading.engine/go_services/pkg/streams/core"`)
			g.P(`    "trading.engine/go_services/pkg/streams/kafka"`)
			g.P(`)`)
			g.P()

			for _, message := range f.Messages {
				structName := message.GoIdent.GoName + "Entity"
				pbType := message.GoIdent.GoName

				// Struct
				g.P("type ", structName, " struct {")
				for _, field := range message.Fields {
					goType := goTypeForField(field)
					jsonTag := fmt.Sprintf("`json:\"%s\"`", field.Desc.JSONName())
					g.P("\t", field.GoName, " ", goType, " ", jsonTag)
				}
				g.P("}")
				g.P()

				// ToProtoBuf
				g.P("func (a *", structName, ") ToProtoBuf() core.Message {")
				g.P("\treturn &", pbType, "{")
				for _, field := range message.Fields {
					g.P("\t\t", field.GoName, ": a.", field.GoName, ",")
				}
				g.P("\t}")
				g.P("}")
				g.P()

				// FromPB
				g.P("func (a *", structName, ") FromPB(pb core.Message) kafka.DataEntity {")
				g.P("\tin := pb.(*", pbType, ")")
				g.P("\treturn &", structName, "{")
				for _, field := range message.Fields {
					g.P("\t\t", field.GoName, ": in.", field.GoName, ",")
				}
				g.P("\t}")
				g.P("}")
				g.P()

				// GetPartitionKey
				g.P("func (a *", structName, ") GetPartitionKey() interface{} {")
				g.P("\treturn a.ID")
				g.P("}")
				g.P()

				// GetPartitionID
				g.P("func (a *", structName, ") GetPartitionID(id interface{}) int64 {")
				g.P("\tstr := fmt.Sprintf(\"%v\", id)")
				g.P("\treturn int64(hash.String(str) % 1000000000)")
				g.P("}")
				g.P()

				// GetMessage
				g.P("func (a *", structName, ") GetMessage() core.Message {")
				g.P("\treturn &", pbType, "{")
				for _, field := range message.Fields {
					g.P("\t\t", field.GoName, ": a.", field.GoName, ",")
				}
				g.P("\t}")
				g.P("}")
				g.P()
			}
		}
		return nil
	})
}
